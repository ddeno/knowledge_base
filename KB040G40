Tip 040: Git push and submodules

If you are working in a repo with submodules, and you develop inside and outside
of the submodule, you have a couple things you need to remember before pushing to
a centralized git remote.

1. Commits made in the submodule will not automatically persist in the master repo.
   You have to git add 'submodule' once your submodule is ready to tell your master
   repo to reference it's newer state.  Remember, the master repo knows nothing about
   the insides of the submodule, it only know what commit it should be checked out
   to.

2. Before you push the master repo, you need to push the submodules.  ALWAYS PUSH 
   SUBMODULES FIRST.  If you push the master repo before the submodules, the remote
   will have a reference to a submodule state that doesn't exist. 

There's sort of a cool side-affect that results from the way git defines submodules.
Since updates in a submodule don't persist until you manually 'git add' the 
submodule, as discussed in (1), developers can push their submodule work as they
please, without having to worry about master-repo validation.  In other words, I 
could push a broken state of a submodule whenever I want and it won't affect any
developers.  Why? Because their 'git submodule update' will check out the submodule
to a non broken state.  Only if they manually pulled the latest in that submodule
would they be affected.


