Tip 014: Git stash for the win

Git stash lets you quickly stash (it's in the name) your currently uncommitted work
so that you can perform a git function that is normally not allowed when you
have a dirty working area.

As an example, let's say you are working on like 10 files that are all in progress
and your boss comes up to you and is all like "...yeah we're going to need you to
stop everything and evaluate a problem we found in December's release"

After you get all in his face about being an octopus head, you have to do a git checkout
of an older state.  But git won't let you check out files if they would "blow away" your
current working tree.  What do you do? Git stash for the win.

git stash save "put a useful stash description here"

You'll notice as soon as the stash is complete, 'git status' will show a clean working
area, meaning your repo is now at the state of the last commit (HEAD). You are now free
to move about the repo.

To see your stashes, do 'git stash list' and you'll see something like this..
       stash@{0} On (no branch): "useful description listed here"

Later you can apply your stash with 'git stash apply <stash id>'
       ex: git stash apply stash@{0}

To apply your latest stash, just do 'git stash pop'.  This will pop the stash out of
the stash list as well, which is fine as long as you don't need to apply the stash
to multiple branches.
