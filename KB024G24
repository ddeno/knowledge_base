Tip 024: git cherry-pick 

If you are working in multiple branches you may have run into the following
scenario before.  Imagine two branches diverge at some point.  Let's say 
these branches are next and int, and they diverged at the same point in time
represented by the branch master, below:

       .-- c1 -- c2 -- c3 -- c4 -- c5 -- next
      / 
master
      \
       '-- c6 -- c7 -- c8 -- c9 -- c10 -- int 

In this example c1-c10 represent unique commit hashes.  Those commits are
only in the branch that follows that development line.

With me so far?  Now imagine you find a problem in your project that exists
in BOTH branches (next and int).  You could fix it in one, and then merge the
two branches, but what if you aren't ready to merge all commits c1-c10?
This is where 'git cherry-pick' comes in handy.

Let's say you made the fix in the next branch, and it's represented below
by commit c12.  

       .-- c1 -- c2 -- c3 -- c4 -- c5 -- c12 --  next
      / 
master
      \
       '-- c6 -- c7 -- c8 -- c9 -- c10 -- int 

You can 'cherry pick' commit 12 across branches to implement the fix in both
branches.  To do this, simply switch to the int branch and git cherry pick...

  git checkout int
  git cherry-pick c12  (c12 is the long commit hash associated with the fix)

       .-- c1 -- c2 -- c3 -- c4 -- c5 -- c12 --  next
      / 
master
      \
       '-- c6 -- c7 -- c8 -- c9 -- c10 -- c12 -- int 

When you execute this command, a merge will happen, just like every other 
merge you have ever seen.  The difference is, you aren't merging branches,
you are merging a single commit into a branch. 

If there's conflicts, use 'git mergetool' like you normally would.  When all is said
and done, you can 'git log' and you should see that commit in both branches.

