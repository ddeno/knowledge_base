Tip 030: git grep

Do you know what grep stands for?  Me either... who cares?  You just know how
to use it.  Usually you are using it to find something in particular, like locating
a class definition or where variables are used.  

Git has a grep feature that is really handy for grepping through files only
tracked in a repo.  This is a great way to automatically skip autogenerated
and binary files without having to add a million grep switches (-I) and |grep -v's
to filter things out.

git grep 'phrase goes here'              <-- will grep through your current working tree
git grep 'phrase goes here' <hash>       <-- will grep through at specific commit hash
git grep 'phrase' $(git rev-list --all)  <-- will grep through all commits
git grep 'phrase' $(git rev-list <rev1>..<rev2>)   <-- will grep through commit range
git grep -e 'regex'                      <-- will grep using regular expressions
git grep -e 'regex' --and -e 'regex'     <-- regex example with and condition

You'll notice none of these examples have a pathspec.  That's because by default
git grep will act recursively from your current directory down.  You can still
give it a path as your last argument if you want.

Mix and match as you please.  Enjoy.
