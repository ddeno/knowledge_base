Lesson 011: Intro to git submodules

Git supports submodules which are basically git repositories nested inside
a git repository.  Sounds confusing right?  Well it's not that hard to grasp
but it makes a git n00bie feel pretty overwhelmed if they don't know how they
work.

Consider the following git project with submodules...

   project/
           .git/
           doug/
                .git/
           pong/
                .git/
           src/

The tree shows that the main project also has two submodules -- doug and pong.
We know that because those directories have .git/ directories of their own.

When you "go into" a submodule (i.e. cd doug/) EVERY GIT COMMAND YOU TYPE WILL
BE IN REFERENCE TO THAT SUBMODULE.  Meaning if you go into doug/ and type 
git log, you will see the log for the full history of the doug/ repo.

In this example, the top level git repo (for project/) knows that it has 
submodules but it knows nothing about the individual history of those submodules.
The only thing project/ knows is the commit hash the submodule is checked out
to at the time commits are made in project/.  

Here's an example.  Let's say you are working in project/ and you need to look
at a file from 2 years ago.  You do this in the top level (project/)

   git checkout f132e41dca51a22a4d578fca0ab3fc1f663d3ae0

Now everything under project/ is at that state, right?  ...Maybe.  Remember git only
knows about a submodule's commit hash, nothing about it's individual history.  
If doug/ and pong/ haven't changed in 2 years, then you are probably fine but that's
pretty unlikely.

You still have to do a 'git submodule update' to make sure doug/ and pong/ are reset 
to the commit hash that is associated with f132e41dca51a22a4d578fca0ab3fc1f663d3ae0 
in project/.

The right git hooks will usually warn you about submodule updates, so don't get too
worried.  Good projects will have good git hooks, and they wont let you screw 
anything up.

You can always see what your main project thinks it's submodules should be checked
out to, by doing 'git submodule'.  If you see 

+d29d739f122f93581e4...  (+ means submodule is not in sync with main repo)
-d29d739f122f93581e4...  (- means submodule has not yet been --init 'ed)

REMEMBER: Git submodules are just nested git repositories.  Don't fear them.
